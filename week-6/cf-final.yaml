---
AWSTemplateFormatVersion: 2010-09-09
Description: Creates infrastructure for the final task

Parameters:
  KeyName:
    Description: Amazon EC2 Key Pair
    Type: AWS::EC2::KeyPair::KeyName
    Default: LondonKeyPair

  SNSTopicName:
    Description: SNS Topic Name
    Type: String
    Default: edu-lohika-training-aws-sns-topic

  SubscriptionEmail:
    Description: Subscription Email
    Type: String
    Default: yosadchyi@lohika.com

  SQSName:
    Description: SQS Name
    Type: String
    Default: edu-lohika-training-aws-sqs-queue

  RDSDatabaseName:
    Description: RDS Database Name
    Type: String
    Default: EduLohikaTrainingAwsRds

  RDSPort:
    Description: RDS Port
    Type: Number
    Default: 5432

  RDSUsername:
    Description: RDS Username
    Type: String
    Default: rootuser

  RDSPassword:
    Description: RDS Password
    Type: String
    Default: rootuser

  DynamoDBTableName:
    Description: DynamoDB Table Name
    Type: String
    Default: edu-lohika-training-aws-dynamodb

Resources:
  ###
  ### DynamoDB
  ###

  DynamoDbTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: UserName
          AttributeType: S
      KeySchema:
        - AttributeName: UserName
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: !Ref DynamoDBTableName

  ###
  ### VPC
  ###

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: Application VPC

  ###
  ### Subnets
  ###

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/25
      AvailabilityZone:
        Fn::Select:
          - 0
          - !GetAZs eu-west-2
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Subnet 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.128/25
      AvailabilityZone:
        Fn::Select:
          - 1
          - !GetAZs eu-west-2
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Subnet 2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.2.0/25
      AvailabilityZone:
        Fn::Select:
          - 0
          - !GetAZs eu-west-2
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Subnet 1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.2.128/25
      AvailabilityZone:
        Fn::Select:
          - 1
          - !GetAZs eu-west-2
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Subnet 2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Application IG

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  ###
  ### Route Tables
  ###

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Route Table

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  InternetGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  NatGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NAT
      RouteTableId: !Ref PrivateRouteTable

  ###
  ### Security Groups
  ###

  RdsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref RDSPort
          ToPort: !Ref RDSPort
          SourceSecurityGroupId: !Ref PrivateSecurityGroup
      VpcId: !Ref VPC

  NatSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH Traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 10.0.2.0/24
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.2.0/24
      VpcId: !Ref VPC

  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Public Security Group
      GroupDescription: Allow SSH From Bastion
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref NatSecurityGroup
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ELBSecurityGroup
      VpcId: !Ref VPC

  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ELB Security Group
      GroupDescription: Allow HTTP Traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Private Security Group
      GroupDescription: Allow SSH From Bastion
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref NatSecurityGroup
      VpcId: !Ref VPC

  ###
  ### RDS
  ###

  Rds:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t2.micro
      BackupRetentionPeriod: 0
      DBSubnetGroupName: !Ref RdsSubnetGroup
      DBName: !Ref RDSDatabaseName
      Engine: postgres
      EngineVersion: "11.5"
      MasterUsername: !Ref RDSUsername
      MasterUserPassword: !Ref RDSPassword
      VPCSecurityGroups:
        - !Ref RdsSecurityGroup

  RdsSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: Private RDS Subnet Group
      DBSubnetGroupDescription: Private RDS Subnet Group
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: Private RDS Subnet Group

  ###
  ### SQS
  ###

  QueueService:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref SQSName

  ###
  ### SNS
  ###

  NotificationServiceTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref SubscriptionEmail
          Protocol: email
      TopicName: !Ref SNSTopicName

  ###
  ### Roles
  ###

  ### Split into roles
  IamInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess

  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref IamInstanceRole

  ###
  ### EC2
  ###

  NAT:
    Type: AWS::EC2::Instance
    DependsOn:
      - AttachGateway
    Properties:
      ImageId: ami-05474bc96b000c7eb
      InstanceType: t2.nano
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref NatSecurityGroup
          SubnetId: !Ref PublicSubnet1
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: NAT

  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      CrossZone: true
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ELBSecurityGroup
      Listeners:
        - LoadBalancerPort: 80
          InstancePort: 80
          Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/health
        HealthyThreshold: 3
        UnhealthyThreshold: 5
        Interval: 30
        Timeout: 5
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: "300"

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - AttachGateway
      - DynamoDbTable
      - QueueService
      - NotificationServiceTopic
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref PublicLaunchTemplate
        Version: !GetAtt PublicLaunchTemplate.LatestVersionNumber
      MinSize: 2
      MaxSize: 2
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: Public AutoScalingGroup
          PropagateAtLaunch: true
      LoadBalancerNames:
        - !Ref LoadBalancer

  PublicLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: PublicEC2-LaunchTemplate
      LaunchTemplateData:
        ImageId: ami-00a1270ce1e007c27
        InstanceType: t2.nano
        IamInstanceProfile:
          Name: !Ref IamInstanceProfile
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref PublicSecurityGroup
        UserData:
          Fn::Base64:
            Fn::Join:
              - "\n"
              - - "#!/bin/bash"
                - ""
                - "yum install java-1.8.0-openjdk.x86_64 -y"
                - ""
                - "aws s3 cp s3://eosadchyi/calc-0.0.1-SNAPSHOT.jar ."
                - "aws s3 cp s3://eosadchyi/bootstrap_public.service /etc/systemd/system"
                - ""
                - "chmod 644 /etc/systemd/system/bootstrap_public.service"
                - ""
                - "systemctl daemon-reload"
                - "systemctl start bootstrap_public"

  PrivateEC2:
    Type: AWS::EC2::Instance
    DependsOn:
      - NatGatewayRoute
      - Rds
      - QueueService
      - NotificationServiceTopic
    Properties:
      ImageId: ami-00a1270ce1e007c27
      InstanceType: t2.nano
      IamInstanceProfile: !Ref IamInstanceProfile
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: false
          DeviceIndex: 0
          GroupSet:
            - !Ref PrivateSecurityGroup
          SubnetId: !Ref PrivateSubnet1
      UserData:
        Fn::Base64:
          Fn::Join:
            - "\n"
            - - "#!/bin/bash"
              - ""
              - ""
              - "yum install java-1.8.0-openjdk.x86_64 -y"
              - ""
              - "aws s3 cp s3://eosadchyi/persist3-0.0.1-SNAPSHOT.jar ."
              - "aws s3 cp s3://eosadchyi/bootstrap_private.service /etc/systemd/system"
              - Fn::Join:
                  - ""
                  - - "export RDS_HOST="
                    - !GetAtt Rds.Endpoint.Address
              - ""
              - "chmod 644 /etc/systemd/system/bootstrap_private.service"
              - ""
              - "systemctl daemon-reload"
              - "systemctl start bootstrap_private"
      Tags:
        - Key: Name
          Value: Private

Outputs:
  Client:
    Description: "Command to run client"
    Value:
      Fn::Join:
        - " "
        - - "java -cp calc-client-1.0-SNAPSHOT-jar-with-dependencies.jar CalcClient"
          - !GetAtt LoadBalancer.DNSName
