---
AWSTemplateFormatVersion: 2010-09-09
Description: Creates VPC, Public and Private subnets with EC2 in each subnet

Parameters:
  KeyName:
    Description: Amazon EC2 Key Pair
    Type: AWS::EC2::KeyPair::KeyName

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: Cloudformation VPC

  # Public subnet configuration
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: eu-west-2
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Subnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  InternetGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  # End of public subnet configuration

  # Private subnet configuration
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.2.0/24
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: eu-west-2
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Subnet

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Route Table

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet

  NatGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NatEC2
      RouteTableId: !Ref PrivateRouteTable

  # End of private subnet configuration

  PublicEC2:
    Type: AWS::EC2::Instance
    DependsOn:
      - PrivateEC2
    Properties:
      ImageId: ami-00a1270ce1e007c27
      InstanceType: t2.nano
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref PublicSecurityGroup
          SubnetId: !Ref PublicSubnet
      UserData:
        Fn::Base64:
          Fn::Join:
            - "\n"
            - - "#!/bin/bash"
              - "sudo su"
              - "yum update -y"
              - "yum install httpd -y"
              - "service httpd start"
              - "chkconfig httpd on"
              - "cd /var/www/html"
              - "echo '<html><h1>This is WebServer from public subnet</h1></html>' > index.html"
      Tags:
        - Key: Name
          Value: Public

  PrivateEC2:
    Type: AWS::EC2::Instance
    DependsOn:
      - NatGatewayRoute
    Properties:
      ImageId: ami-00a1270ce1e007c27
      InstanceType: t2.nano
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: false
          DeviceIndex: 0
          GroupSet:
            - !Ref PrivateSecurityGroup
          SubnetId: !Ref PrivateSubnet
      UserData:
        Fn::Base64:
          Fn::Join:
            - "\n"
            - - "#!/bin/bash"
              - "sudo su"
              - "yum update -y"
              - "yum install httpd -y"
              - "service httpd start"
              - "chkconfig httpd on"
              - "cd /var/www/html"
              - "echo '<html><h1>This is WebServer from private subnet</h1></html>' > index.html"
      Tags:
        - Key: Name
          Value: Private

  NatEC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-029dbaca987ff4afe
      InstanceType: t2.nano
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref PublicSecurityGroup
          SubnetId: !Ref PublicSubnet
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: Nat

  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Public Security Group
      GroupDescription: Allow SSH and HTTP Traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Private Security Group
      GroupDescription: Allow SSH and HTTP Traffic
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 10.0.1.0/24
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.1.0/24
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 10.0.1.0/24
      VpcId: !Ref VPC

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - PublicEC2
      - PrivateEC2
    Properties:
      IpAddressType: ipv4
      Name: Cloudformation-ELB
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ELBSecurityGroup
      Subnets:
        - !Ref PublicSubnet
        - !Ref PrivateSubnet
      Tags:
        - Key: Name
          Value: Cloudformation ELB
      Type: application

  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /index.html
      TargetType: instance
      Port: 80
      Protocol: HTTP
      Targets:
        - Id: !Ref PublicEC2
          Port: 80
        - Id: !Ref PrivateEC2
          Port: 80
      VpcId: !Ref VPC

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ELB Security Group
      GroupDescription: Allow HTTP Traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
